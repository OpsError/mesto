(()=>{"use strict";class e{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._selector=document.querySelector(s)}addItem(e){this._selector.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}class t{constructor(e){this._popupSelector=e,this._handleEscClose=this._handleEscClose.bind(this)}close(){this._popupSelector.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popupSelector.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupSelector.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-icon"))&&this.close()}))}}class s extends t{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=e.querySelector(".popup__form"),this._inputList=e.querySelectorAll(".popup__input")}_getInputValues(){return this._inputValueList={},this._inputList.forEach((e=>{this._inputValueList[e.name]=e.value})),this._inputValueList}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._list=this._getInputValues(),this._handleSubmitForm({name:this._list.title,link:this._list.about})})),super.setEventListeners()}close(){super.close(),this._form.reset()}}class n{constructor(e,t){this._formElement=t,this._config=e,this._inputList=Array.from(t.querySelectorAll(this._config.inputSelector)),this._buttonElement=t.querySelector(this._config.submitButtonSelector)}_showInputError=(e,t)=>{const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),s.textContent=t,s.classList.add(this._config.errorClass)};_hideInputError=e=>{const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""};_checkInputValidity=e=>{e.validity.valid?this._hideInputError(e):(console.log(e.validationMessage),this._showInputError(e,e.validationMessage))};_hasInvalidInput=()=>this._inputList.some((e=>!e.validity.valid));_toggleButtonState=()=>{this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)};_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}blockButtonSave(e){this._buttonElement.classList.add("popup__save_inactive"),this._buttonElement.disabled=!0}enableValidation(){this._setEventListeners()}}class o{constructor(e,t,{openImage:s}){this._data=e,this._templateSelector=t,this._openImage=s,this._element=this._getTemplate(),this._elementPhoto=this._element.querySelector(".element__photo"),this._countLikes=this._element.querySelector(".element__like-number")}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){const e=this._element.querySelector(".element__like"),t=this._element.querySelector(".element__trash"),s=this._element.querySelector(".element__like-icon");e.addEventListener("click",(()=>{s.classList.toggle("element__like-icon_active")})),t.addEventListener("click",(()=>{this._element.remove(),this._element=null})),this._elementPhoto.addEventListener("click",(()=>{this._openImage({link:this._data.link,name:this._data.name})}))}generateCard(){return this._elementPhoto.src=this._data.link,this._elementPhoto.alt=this._data.name,this._element.querySelector(".element__description").textContent=this._data.name,this._countLikes.textContent=this._data.likes.length+1,this._setEventListeners(),this._element}}const i=document.querySelector(".page"),r=i.querySelector(".form-edit"),l=i.querySelector(".form-add"),a=document.querySelector(".popup_image-full"),_=i.querySelector(".profile__edit-button"),c=i.querySelector(".profile__add-button"),u=i.querySelector(".profile__name"),p=i.querySelector(".profile__description"),h=i.querySelector(".profile__photo"),d=r.querySelector(".popup"),m=r.querySelector(".popup__input_type_name"),S=r.querySelector(".popup__input_type_description"),f=l.querySelector(".popup"),y=l.querySelector(".popup__input_type_title"),v=l.querySelector(".popup__input_type_link"),g=(a.querySelector(".popup"),{fieldsetSelector:".popup__form-set",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"}),E=new class extends t{constructor(e){super(e),this._image=this._popupSelector.querySelector(".popup__image"),this._figcaption=this._popupSelector.querySelector(".popup__figcaption")}open(e,t){this._image.src=t,this._image.alt=e,this._figcaption.textContent=e,super.open()}}(a);function L({link:e,name:t}){E.open(t,e)}function b(e){return new o(e,"#element",{openImage:L}).generateCard()}E.setEventListeners();const q=new n(g,l.querySelector(".popup__form")),k=new n(g,r.querySelector(".popup__form"));q.enableValidation(),k.enableValidation();const C=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(new Error("Произошла ошибка"))}getInfo(){return fetch(`${this._url}/users/me`,{headers:this._headers}).then(this._handleResponse)}getCard(){return fetch(`${this._url}/cards`,{headers:this._headers}).then(this._handleResponse)}patchInfo(e){return fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.link})}).then(this._handleResponse)}postCard(e){return fetch(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-60",headers:{authorization:"11c262d9-4172-458c-924e-d3009da526d4","Content-type":"application/json"}});C.getInfo().then((e=>{u.textContent=e.name,p.textContent=e.about,h.src=e.avatar,console.log(e)}));const I=new s(f,(({name:t,link:s})=>{C.postCard({name:t,link:s}).then((t=>{const s=b(t);console.log(s);const n=new e({items:t,renderer:e=>{const t=b(e);n.addItem(t)}},".elements");n.addItem(s),I.close()}))}));I.setEventListeners();const w=new class{constructor({title:e,about:t}){this._title=e,this._about=t,this._profileName=document.querySelector(".profile__name"),this._profileDescription=document.querySelector(".profile__description")}getUserInfo(){return{name:this._title.textContent,about:this._about.textContent}}setUserInfo(e,t){this._profileName.textContent=e,this._profileDescription.textContent=t}}({title:u,about:p}),x=new s(d,(({name:e,link:t})=>{C.patchInfo({name:e,link:t}).then((e=>{console.log(e),w.setUserInfo(e.name,e.about),x.close()}))}));x.setEventListeners(),C.getCard().then((t=>{const s=new e({items:t,renderer:e=>{const t=b(e);s.addItem(t)}},".elements");s.renderItems()})),c.addEventListener("click",(()=>{I.open(),y.value="",v.value="",q.blockButtonSave(f)})),_.addEventListener("click",(()=>{const e=w.getUserInfo();m.value=e.name,S.value=e.about,x.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,