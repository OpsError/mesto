(()=>{"use strict";class e{constructor(e,t,s,{openDeleteWindow:o},n,i){this._data=e,this._arrayLikes=e.likes,this._templateSelector=t,this._openImage=n,this._element=this._getTemplate(),this._openDeleteWindow=o,this._userId=s,this._handleLikeCard=i,this._elementPhoto=this._element.querySelector(".element__photo"),this._countLikes=this._element.querySelector(".element__like-number"),this._buttonTrash=this._element.querySelector(".element__trash"),this._iconButtonLike=this._element.querySelector(".element__like-icon")}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".element__like").addEventListener("click",(()=>{this._handleLikeCard()})),this._buttonTrash.addEventListener("click",(()=>{this._openDeleteWindow(this._element._element,this._data._id)})),this._elementPhoto.addEventListener("click",(()=>{this._openImage({link:this._data.link,name:this._data.name})}))}getLikes(e){this._countLikes.textContent=e.length}toggleLike(){this._iconButtonLike.classList.toggle("element__like-icon_active")}checkLike(){return this._arrayLikes.some((e=>e._id===this._userId))}deleteWindow(){this._buttonTrash.addEventListener("click",(()=>{this._openDeleteWindow(this,this._data._id)}))}deleteCard(){console.log(this._element),this._element.remove(),this._element=null}checkId(e){this._data.owner._id!==e&&this._buttonTrash.classList.add("element__trash_blocked")}generateCard(){return this._elementPhoto.src=this._data.link,this._elementPhoto.alt=this._data.name,this._element.querySelector(".element__description").textContent=this._data.name,this.getLikes(this._arrayLikes),this.checkLike()&&this.toggleLike(),this._setEventListeners(),this._element}}class t{constructor(e){this._popupSelector=e,this._handleEscClose=this._handleEscClose.bind(this)}close(){this._popupSelector.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popupSelector.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupSelector.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-icon"))&&this.close()}))}}class s extends t{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=e.querySelector(".popup__form"),this._inputList=e.querySelectorAll(".popup__input")}_getInputValues(){return this._inputValueList={},this._inputList.forEach((e=>{this._inputValueList[e.name]=e.value})),this._inputValueList}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._list=this._getInputValues(),this._handleSubmitForm({name:this._list.title,link:this._list.about})})),super.setEventListeners()}close(){super.close(),this._form.reset()}}class o{constructor(e,t){this._formElement=t,this._config=e,this._inputList=Array.from(t.querySelectorAll(this._config.inputSelector)),this._buttonElement=t.querySelector(this._config.submitButtonSelector)}_showInputError=(e,t)=>{const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),s.textContent=t,s.classList.add(this._config.errorClass)};_hideInputError=e=>{const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""};_checkInputValidity=e=>{e.validity.valid?this._hideInputError(e):(console.log(e.validationMessage),this._showInputError(e,e.validationMessage))};_hasInvalidInput=()=>this._inputList.some((e=>!e.validity.valid));_toggleButtonState=()=>{this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)};_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}cleanErrorMessage(e){this._formElement.querySelector(`.${e.id}-error`).textContent="",e.classList.remove(this._config.inputErrorClass)}blockButtonSave(){this._buttonElement.classList.add("popup__save_inactive"),this._buttonElement.disabled=!0}enableValidation(){this._setEventListeners()}}class n extends t{constructor(e,t){super(e),this._handleSubmitFormDelete=t,this._formDelete=e.querySelector(".popup__form")}setEventListeners(){this._formDelete.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitFormDelete()})),super.setEventListeners()}}const i=document.querySelector(".page"),r=i.querySelector(".form-edit"),l=i.querySelector(".form-add"),a=i.querySelector(".popup_image-full"),_=i.querySelector(".delete-popup"),c=i.querySelector(".patch-avatar"),h=i.querySelector(".profile__edit-button"),u=i.querySelector(".profile__add-button"),p=i.querySelector(".profile__edit-avatar"),d=i.querySelector(".profile__name"),m=i.querySelector(".profile__description"),f=(i.querySelector(".profile__photo"),r.querySelector(".popup")),g=r.querySelector(".popup__input_type_name"),v=r.querySelector(".popup__input_type_description"),S=r.querySelector(".popup__save"),y=c.querySelector(".popup"),L=c.querySelector(".popup__input_type_url"),k=c.querySelector(".popup__save"),E=l.querySelector(".popup"),b=l.querySelector(".popup__input_type_title"),q=l.querySelector(".popup__input_type_link"),C=_.querySelector(".popup"),I=(_.querySelector(".popup__save"),a.querySelector(".popup"),{fieldsetSelector:".popup__form-set",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"}),w=new class extends t{constructor(e){super(e),this._image=this._popupSelector.querySelector(".popup__image"),this._figcaption=this._popupSelector.querySelector(".popup__figcaption")}open(e,t){this._image.src=t,this._image.alt=e,this._figcaption.textContent=e,super.open()}}(a);function x({link:e,name:t}){w.open(t,e)}w.setEventListeners();const D=new o(I,l.querySelector(".popup__form")),$=new o(I,r.querySelector(".popup__form")),B=new o(I,c.querySelector(".popup__form"));D.enableValidation(),$.enableValidation(),B.enableValidation();const V=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(new Error("Произошла ошибка"))}getInfo(){return fetch(`${this._url}/users/me`,{headers:this._headers}).then(this._handleResponse)}getCard(){return fetch(`${this._url}/cards`,{headers:this._headers}).then(this._handleResponse)}patchInfo(e){return fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.link})}).then(this._handleResponse)}postCard(e){return fetch(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._headers,body:JSON.stringify({data:e})}).then(this._handleResponse)}putLike(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({data:e})}).then(this._handleResponse)}deleteLike(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._headers,body:JSON.stringify({data:e})}).then(this._handleResponse)}patchAvatar(e){return fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-60",headers:{authorization:"11c262d9-4172-458c-924e-d3009da526d4","Content-type":"application/json"}}),P=new class{constructor(e){this._title=e.title,this._about=e.about,this._profileName=document.querySelector(".profile__name"),this._profileDescription=document.querySelector(".profile__description"),this._profilePhoto=document.querySelector(".profile__photo")}getUserInfo(){return{name:this._title.textContent,about:this._about.textContent}}setUserInfo({name:e,about:t}){this._profileName.textContent=e,this._profileDescription.textContent=t}setAvatar(e){this._profilePhoto.src=e}}({title:d,about:m});let T,A;Promise.all([V.getInfo(),V.getCard()]).then((e=>{const t=e[0],s=e[1];T=t._id,A=s,P.setUserInfo({name:t.name,about:t.about}),P.setAvatar(t.avatar),M.renderItems(s)}));const N=new s(E,(({name:e,link:t})=>{V.postCard({name:e,link:t}).then((e=>{R(e),console.log(e),N.close()})).catch((e=>{console.log(e)}))}));function R(t){const s=new e(t,"#element",T,{openDeleteWindow:function(){o.open(),o.setEventListeners()}},x,(function(){!function(e,t){e.checkLike()?(console.log(e.checkLike()),V.deleteLike(t).then((t=>{e.getLikes(t.likes),e.toggleLike()})).catch((e=>{console.log(e)}))):(console.log(e.checkLike()),V.putLike(t).then((t=>{e.getLikes(t.likes),e.toggleLike()})).catch((e=>{console.log(e)})))}(s,t._id)}));s.checkId(T),s.deleteWindow();const o=new n(C,(()=>{V.deleteCard(t._id).then((()=>{s.deleteCard(),o.close()})).catch((e=>{console.log(e)}))})),i=s.generateCard();M.addItem(i)}N.setEventListeners();const M=new class{constructor(e,t){this._renderer=e,this._selector=document.querySelector(t)}addItem(e){this._selector.prepend(e)}renderItems(e){e.reverse().forEach((e=>{this._renderer(e)}))}}(R,".elements"),U=new s(f,(({name:e,link:t})=>{S.textContent="Сохранение...",V.patchInfo({name:e,link:t}).then((e=>{console.log(e),P.setUserInfo({name:e.name,about:e.about}),U.close()})).catch((e=>{console.log(e)}))}));U.setEventListeners();const O=new class extends t{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=e.querySelector(".popup__form"),this._inputData=e.querySelector(".popup__input")}_getInputValues(){return this._inputData.value}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._url=this._getInputValues(),console.log(this._url),this._handleSubmitForm(this._url)})),super.setEventListeners()}close(){super.close(),this._form.reset()}}(y,(e=>{k.textContent="Сохранение...",V.patchAvatar(e).then((e=>{P.setAvatar(e.avatar),O.close()})).catch((e=>{console.log(e)}))}));u.addEventListener("click",(()=>{N.open(),D.cleanErrorMessage(b),D.cleanErrorMessage(q),b.value="",q.value="",D.blockButtonSave()})),h.addEventListener("click",(()=>{const e=P.getUserInfo();g.value=e.name,v.value=e.about,$.cleanErrorMessage(g),$.cleanErrorMessage(v),S.textContent="Сохранить",U.open()})),p.addEventListener("click",(()=>{k.textContent="Сохранить",O.open(),B.cleanErrorMessage(L),L.value="",O.setEventListeners(),B.blockButtonSave()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,