(()=>{"use strict";class e{constructor(e,t,s,{openDeleteWindow:o},n,i){this._data=e,this._arrayLikes=e.likes,this._templateSelector=t,this._openImage=n,this._element=this._getTemplate(),this._openDeleteWindow=o,this._userId=s,this._handleLikeCard=i,this._elementPhoto=this._element.querySelector(".element__photo"),this._countLikes=this._element.querySelector(".element__like-number"),this._buttonTrash=this._element.querySelector(".element__trash"),this._iconButtonLike=this._element.querySelector(".element__like-icon")}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){const e=this._element.querySelector(".element__like");console.log(this._data),e.addEventListener("click",(()=>{this._handleLikeCard(this._data._id)})),this._buttonTrash.addEventListener("click",(()=>{this._openDeleteWindow(this._element._element,this._data._id)})),this._elementPhoto.addEventListener("click",(()=>{this._openImage({link:this._data.link,name:this._data.name})}))}getLikes(e){this._countLikes.textContent=e.length}toggleLike(){this._iconButtonLike.classList.toggle("element__like-icon_active")}checkLike(){return this._arrayLikes.some((e=>e._id===this._userId))}deleteWindow(){this._buttonTrash.addEventListener("click",(()=>{this._openDeleteWindow(this,this._data._id)}))}deleteCard(){console.log(this._element),this._element.remove(),this._element=null}checkId(e){this._data.owner._id!==e&&this._buttonTrash.classList.add("element__trash_blocked")}generateCard(){return this._elementPhoto.src=this._data.link,this._elementPhoto.alt=this._data.name,this._element.querySelector(".element__description").textContent=this._data.name,this.getLikes(this._arrayLikes),this.checkLike()&&this.toggleLike(),this._setEventListeners(),this._element}}class t{constructor(e){this._popupSelector=e,this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClose=this._handleOverlayClose.bind(this)}close(){this._popupSelector.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupSelector.removeEventListener("mousedown",this._handleOverlayClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleOverlayClose(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-icon"))&&this.close()}open(){this._popupSelector.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupSelector.addEventListener("mousedown",this._handleOverlayClose)}}class s extends t{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=e.querySelector(".popup__form"),this._inputList=e.querySelectorAll(".popup__input")}_getInputValues(){return this._inputValueList={},this._inputList.forEach((e=>{this._inputValueList[e.name]=e.value})),this._inputValueList}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._list=this._getInputValues(),this._handleSubmitForm({name:this._list.title,link:this._list.about})})),super.setEventListeners()}close(){super.close(),this._form.reset()}}class o{constructor(e,t){this._formElement=t,this._config=e,this._inputList=Array.from(t.querySelectorAll(this._config.inputSelector)),this._buttonElement=t.querySelector(this._config.submitButtonSelector)}_showInputError=(e,t)=>{const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),s.textContent=t,s.classList.add(this._config.errorClass)};_hideInputError=e=>{const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""};_checkInputValidity=e=>{e.validity.valid?this._hideInputError(e):(console.log(e.validationMessage),this._showInputError(e,e.validationMessage))};_hasInvalidInput=()=>this._inputList.some((e=>!e.validity.valid));_toggleButtonState=()=>{this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)};_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}cleanErrorMessage(e){this._formElement.querySelector(`.${e.id}-error`).textContent="",e.classList.remove(this._config.inputErrorClass)}blockButtonSave(){this._buttonElement.classList.add("popup__save_inactive"),this._buttonElement.disabled=!0}enableValidation(){this._setEventListeners()}}class n extends t{constructor(e,t){super(e),this._handleSubmitFormDelete=t,this._formDelete=e.querySelector(".popup__form")}_deleteCard(){this._handleSubmitFormDelete()}setEventListeners(){super.setEventListeners(),this._formDelete.addEventListener("submit",this._handleSubmitFormDelete)}close(){super.close(),this._formDelete.removeEventListener("submit",this._handleSubmitFormDelete)}}const i=document.querySelector(".page"),r=i.querySelector(".form-edit"),l=i.querySelector(".form-add"),a=i.querySelector(".popup_image-full"),h=i.querySelector(".delete-popup"),_=i.querySelector(".patch-avatar"),c=i.querySelector(".profile__edit-button"),u=i.querySelector(".profile__add-button"),p=i.querySelector(".profile__edit-avatar"),d=i.querySelector(".profile__name"),m=i.querySelector(".profile__description"),v=(i.querySelector(".profile__photo"),r.querySelector(".popup")),S=r.querySelector(".popup__input_type_name"),f=r.querySelector(".popup__input_type_description"),y=r.querySelector(".popup__save"),g=_.querySelector(".popup"),L=_.querySelector(".popup__input_type_url"),k=_.querySelector(".popup__save"),E=l.querySelector(".popup"),b=l.querySelector(".popup__input_type_title"),q=l.querySelector(".popup__input_type_link"),C=h.querySelector(".popup"),I=(h.querySelector(".popup__save"),a.querySelector(".popup"),{fieldsetSelector:".popup__form-set",inputSelector:".popup__input",submitButtonSelector:".popup__save",inactiveButtonClass:"popup__save_inactive",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_active"}),w=new class extends t{constructor(e){super(e),this._image=this._popupSelector.querySelector(".popup__image"),this._figcaption=this._popupSelector.querySelector(".popup__figcaption")}open(e,t){this._image.src=t,this._image.alt=e,this._figcaption.textContent=e,super.open()}}(a);function D({link:e,name:t}){w.open(t,e)}w.setEventListeners();const x=new o(I,l.querySelector(".popup__form")),B=new o(I,r.querySelector(".popup__form")),$=new o(I,_.querySelector(".popup__form"));x.enableValidation(),B.enableValidation(),$.enableValidation();const V=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(new Error("Произошла ошибка"))}getInfo(){return fetch(`${this._url}/users/me`,{headers:this._headers}).then(this._handleResponse)}getCard(){return fetch(`${this._url}/cards`,{headers:this._headers}).then(this._handleResponse)}patchInfo(e){return fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.link})}).then(this._handleResponse)}postCard(e){return fetch(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._headers,body:JSON.stringify({data:e})}).then(this._handleResponse)}putLike(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({data:e})}).then(this._handleResponse)}deleteLike(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._headers,body:JSON.stringify({data:e})}).then(this._handleResponse)}patchAvatar(e){return fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}}({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-60",headers:{authorization:"11c262d9-4172-458c-924e-d3009da526d4","Content-type":"application/json"}}),O=new class{constructor(e){this._title=e.title,this._about=e.about,this._profileName=document.querySelector(".profile__name"),this._profileDescription=document.querySelector(".profile__description"),this._profilePhoto=document.querySelector(".profile__photo")}getUserInfo(){return{name:this._title.textContent,about:this._about.textContent}}setUserInfo({name:e,about:t}){this._profileName.textContent=e,this._profileDescription.textContent=t}setAvatar(e){this._profilePhoto.src=e}}({title:d,about:m});let P;Promise.all([V.getInfo(),V.getCard()]).then((e=>{const t=e[0],s=e[1];P=t._id,O.setUserInfo({name:t.name,about:t.about}),O.setAvatar(t.avatar),N.renderItems(s)}));const T=new s(E,(({name:e,link:t})=>{V.postCard({name:e,link:t}).then((e=>{A(e),console.log(e),T.close()})).catch((e=>{console.log(e)}))}));function A(t){const s=new e(t,"#element",P,{openDeleteWindow:function(){o.open(),o.setEventListeners()}},D,(function(e){!function(e,t){e.checkLike()?(console.log(e.checkLike()),V.deleteLike(t).then((t=>{e.getLikes(t.likes),e.toggleLike()})).catch((e=>{console.log(e)}))):(console.log(e.checkLike()),V.putLike(t).then((t=>{e.getLikes(t.likes),e.toggleLike()})).catch((e=>{console.log(e)})))}(s,e)}));s.checkId(P),s.deleteWindow();const o=new n(C,(e=>{e.preventDefault(),V.deleteCard(t._id).then((()=>{s.deleteCard(),o.close()})).catch((e=>{console.log(e)}))})),i=s.generateCard();N.addItem(i)}T.setEventListeners();const N=new class{constructor(e,t){this._renderer=e,this._selector=document.querySelector(t)}addItem(e){this._selector.prepend(e)}renderItems(e){e.reverse().forEach((e=>{this._renderer(e)}))}}(A,".elements"),R=new s(v,(({name:e,link:t})=>{y.textContent="Сохранение...",V.patchInfo({name:e,link:t}).then((e=>{console.log(e),O.setUserInfo({name:e.name,about:e.about}),R.close()})).catch((e=>{console.log(e)}))}));R.setEventListeners();const F=new class extends t{constructor(e,t){super(e),this._handleSubmitForm=t,this._form=e.querySelector(".popup__form"),this._inputData=e.querySelector(".popup__input")}_getInputValues(){return this._inputData.value}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._url=this._getInputValues(),console.log(this._url),this._handleSubmitForm(this._url)})),super.setEventListeners()}close(){super.close(),this._form.reset()}}(g,(e=>{k.textContent="Сохранение...",V.patchAvatar(e).then((e=>{O.setAvatar(e.avatar),F.close()})).catch((e=>{console.log(e)}))}));u.addEventListener("click",(()=>{T.open(),x.cleanErrorMessage(b),x.cleanErrorMessage(q),b.value="",q.value="",x.blockButtonSave()})),c.addEventListener("click",(()=>{const e=O.getUserInfo();S.value=e.name,f.value=e.about,B.cleanErrorMessage(S),B.cleanErrorMessage(f),y.textContent="Сохранить",B.blockButtonSave(),R.open()})),p.addEventListener("click",(()=>{k.textContent="Сохранить",F.open(),$.cleanErrorMessage(L),L.value="",F.setEventListeners(),$.blockButtonSave()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3JDZ0IsRUFBbUJwQyxrQkFBa0JxQixHQUNyQ0MsRUFBb0IvRixZQUFjLFlBQ2xDNkcsRUFBbUJuQyxrQkFDbkI4RixFQUFpQjNJLE1BQU0sSUFJM0I0RCxFQUFhL0YsaUJBQWlCLFNBQVMsS0FDbkN3RyxFQUFtQmxHLFlBQWMsWUFDakN5SyxFQUFnQjVJLE9BQ2hCaUYsRUFBeUJyQyxrQkFBa0J3QixHQUMzQ0EsRUFBZ0J4RCxNQUFRLEdBQ3hCZ0ksRUFBZ0IzSSxvQkFDaEJnRixFQUF5QnBDLGlCQUFpQixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwRGVsZXRlLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cEF2YXRhci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHRlbXBsYXRlU2VsZWN0b3IsIHVzZXJJZCwge29wZW5EZWxldGVXaW5kb3d9LCBvcGVuSW1hZ2UsIGhhbmRsZUxpa2VDYXJkKSB7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5fYXJyYXlMaWtlcyA9IGRhdGEubGlrZXM7XHJcbiAgICAgICAgdGhpcy5fdGVtcGxhdGVTZWxlY3RvciA9IHRlbXBsYXRlU2VsZWN0b3I7XHJcbiAgICAgICAgdGhpcy5fb3BlbkltYWdlID0gb3BlbkltYWdlO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX29wZW5EZWxldGVXaW5kb3cgPSBvcGVuRGVsZXRlV2luZG93O1xyXG4gICAgICAgIHRoaXMuX3VzZXJJZCA9IHVzZXJJZDtcclxuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2FyZCA9IGhhbmRsZUxpa2VDYXJkO1xyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50UGhvdG8gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19waG90bycpO1xyXG4gICAgICAgIHRoaXMuX2NvdW50TGlrZXMgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19saWtlLW51bWJlcicpO1xyXG4gICAgICAgIHRoaXMuX2J1dHRvblRyYXNoID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudF9fdHJhc2gnKTtcclxuICAgICAgICB0aGlzLl9pY29uQnV0dG9uTGlrZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2xpa2UtaWNvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v0LLQvtC30LLRgNCw0YnQsNC10YIg0YHQtdC70LXQutGC0L7RgCDRiNCw0LHQu9C+0L3QsFxyXG4gICAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fdGVtcGxhdGVTZWxlY3RvcilcclxuICAgICAgIC5jb250ZW50XHJcbiAgICAgICAucXVlcnlTZWxlY3RvcignLmVsZW1lbnQnKVxyXG4gICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy/Rg9GB0YLQsNC90L7QstGJ0LjQuiDRgdC+0LHRi9GC0LjQuVxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkxpa2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19saWtlJyk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fZGF0YSk7XHJcblxyXG4gICAgICAgIC8v0LvQsNC50LpcclxuICAgICAgICBidXR0b25MaWtlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2FyZCh0aGlzLl9kYXRhLl9pZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8v0L7RgtC60YDRi9GC0Ywg0L7QutC90L4g0YPQtNCw0LvQtdC90LjRj1xyXG4gICAgICAgIHRoaXMuX2J1dHRvblRyYXNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9vcGVuRGVsZXRlV2luZG93KHRoaXMuX2VsZW1lbnQuX2VsZW1lbnQsIHRoaXMuX2RhdGEuX2lkKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy/QvtGC0LrRgNGL0YLRjCDRhNC+0YLQvtCz0YDQsNGE0LjRjlxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRQaG90by5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fb3BlbkltYWdlKHtsaW5rOiB0aGlzLl9kYXRhLmxpbmssIG5hbWU6IHRoaXMuX2RhdGEubmFtZX0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGdldExpa2VzIChhcnIpIHtcclxuICAgICAgICB0aGlzLl9jb3VudExpa2VzLnRleHRDb250ZW50ID0gYXJyLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVMaWtlKCkge1xyXG4gICAgICAgIHRoaXMuX2ljb25CdXR0b25MaWtlLmNsYXNzTGlzdC50b2dnbGUoJ2VsZW1lbnRfX2xpa2UtaWNvbl9hY3RpdmUnKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja0xpa2UgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hcnJheUxpa2VzLnNvbWUoaXRlbSA9PiBpdGVtLl9pZCA9PT0gdGhpcy5fdXNlcklkKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVXaW5kb3coKSB7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uVHJhc2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZW5EZWxldGVXaW5kb3codGhpcywgdGhpcy5fZGF0YS5faWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNhcmQoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fZWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja0lkKHVzZXJJZCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kYXRhLm93bmVyLl9pZCAhPT0gdXNlcklkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvblRyYXNoLmNsYXNzTGlzdC5hZGQoJ2VsZW1lbnRfX3RyYXNoX2Jsb2NrZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy/Rg9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDQutCw0YDRgtC+0YfQutC1INC90LDQt9Cy0LDQvdC40LUsINC60LDRgNGC0LjQvdC60YMg0Lgg0L7Qv9C40YHQsNC90LjQtVxyXG4gICAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnRQaG90by5zcmMgPSB0aGlzLl9kYXRhLmxpbms7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudFBob3RvLmFsdCA9IHRoaXMuX2RhdGEubmFtZTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19kZXNjcmlwdGlvbicpLnRleHRDb250ZW50ID0gdGhpcy5fZGF0YS5uYW1lO1xyXG4gICAgICAgIHRoaXMuZ2V0TGlrZXModGhpcy5fYXJyYXlMaWtlcyk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tMaWtlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVMaWtlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBTZWxlY3RvciA9IHBvcHVwO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVPdmVybGF5Q2xvc2UgPSB0aGlzLl9oYW5kbGVPdmVybGF5Q2xvc2UuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cFNlbGVjdG9yLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBTZWxlY3Rvci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVPdmVybGF5Q2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVFc2NDbG9zZShldnQpIHtcclxuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfaGFuZGxlT3ZlcmxheUNsb3NlKGV2dCkge1xyXG4gICAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXAnKSB8fCAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwX19jbG9zZS1pY29uJykpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbigpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cFNlbGVjdG9yLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVPdmVybGF5Q2xvc2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXAsIGhhbmRsZVN1Ym1pdEZvcm0pIHtcclxuICAgICAgICBzdXBlcihwb3B1cCk7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSA9IGhhbmRsZVN1Ym1pdEZvcm07XHJcblxyXG4gICAgICAgIHRoaXMuX2Zvcm0gPSBwb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKTtcclxuICAgICAgICB0aGlzLl9pbnB1dExpc3QgPSBwb3B1cC5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2lucHV0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/RgdC+0LHQuNGA0LDQtdGCINC00LDQvdC90YvQtSDRgSDQv9C+0LvQtdC5XHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMgKCkge1xyXG4gICAgICAgIHRoaXMuX2lucHV0VmFsdWVMaXN0ID0ge307XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faW5wdXRWYWx1ZUxpc3RbaXRlbS5uYW1lXSA9IGl0ZW0udmFsdWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dFZhbHVlTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcclxuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3QgPSB0aGlzLl9nZXRJbnB1dFZhbHVlcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVTdWJtaXRGb3JtKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuX2xpc3QudGl0bGUsXHJcbiAgICAgICAgICAgICAgICBsaW5rOiB0aGlzLl9saXN0LmFib3V0fSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IgKGNvbmZpZywgZm9ybUVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fY29uZmlnLmlucHV0U2VsZWN0b3IpKTtcclxuICAgICAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fY29uZmlnLmVycm9yQ2xhc3MpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvL9GB0LrRgNGL0YLRjCDQvtGI0LjQsdC60YMg0LLQstC+0LTQsFxyXG4gICAgX2hpZGVJbnB1dEVycm9yID0gKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuZXJyb3JDbGFzcyk7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gJyc7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8v0L/RgNC+0LLQtdGA0LrQsCDRhNC+0YDQvNGLINC90LAg0LLQsNC70LjQtNC90L7RgdGC0YxcclxuICAgIF9jaGVja0lucHV0VmFsaWRpdHkgPSAoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHsgLy/QtdGB0LvQuCDQtdGB0YLRjCDQvtGI0LjQsdC60LBcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvL9C/0YDQvtCy0LXRgNC60LAg0LrQsNC20LTQvtCz0L4g0L/QvtC70Y8g0L3QsCDQvtGI0LjQsdC60YMg0LIg0L/QvtC70LUg0LLQstC+0LTQsFxyXG4gICAgX2hhc0ludmFsaWRJbnB1dCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8v0YHQtNC10LvQsNGC0Ywg0LrQvdC+0L/QutGDINC90LXQsNC60YLQuNCy0L3QvtC5KNCw0LrRgtC40LLQvdC+0LkpINC/0YDQuCDQvtGI0LjQsdC60LUo0L/RgNCw0LLQuNC70YzQvdC+0Lwg0LLQstC+0LTQtSlcclxuICAgIF90b2dnbGVCdXR0b25TdGF0ZSA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgICAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8v0YPRgdGC0LDQvdC+0LLQuNGC0Ywg0YHQu9GD0YjQsNGC0LXQu9C4INC90LAg0LrQsNC20LTRg9GOINGE0L7RgNC80YNcclxuICAgIF9zZXRFdmVudExpc3RlbmVycyAoKSB7XHJcbiAgICAgICAgLy/Qv9GA0L7QstC10YDQuNGC0Ywg0LrQvdC+0L/QutGDINC/0YDQuCDQvtGC0LrRgNGL0YLQuNC4INGE0L7RgNC80YtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICBcclxuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKT0+IHtcclxuICAgICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIC8v0L/RgNC+0LLQtdGA0Y/RgtGMINC60L3QvtC/0LrRgyDQv9GA0Lgg0LLQstC+0LTQtSDQutCw0LbQtNC+0LPQviDRgdC40LzQstC+0LvQsFxyXG4gICAgICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICBjbGVhbkVycm9yTWVzc2FnZShpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xyXG4gICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fY29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/Qt9Cw0LHQu9C+0LrQuNGA0L7QstCw0YLRjCDQutC90L7Qv9C60YMg0L/RgNC4INC+0YLQutGA0YvRgtC40Lgg0L/QvtC/0LDQv9CwXHJcbiAgICBibG9ja0J1dHRvblNhdmUoKSB7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwb3B1cF9fc2F2ZV9pbmFjdGl2ZScpO1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgICBcclxuICAgIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cERlbGV0ZSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yIChwb3B1cCwgaGFuZGxlU3VibWl0Rm9ybURlbGV0ZSkge1xyXG4gICAgICAgIHN1cGVyKHBvcHVwKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVTdWJtaXRGb3JtRGVsZXRlID0gaGFuZGxlU3VibWl0Rm9ybURlbGV0ZTtcclxuICAgICAgICB0aGlzLl9mb3JtRGVsZXRlID0gcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XHJcbiAgICB9XHJcblxyXG4gICAgX2RlbGV0ZUNhcmQoKSB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybURlbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v0YHQu9GD0YjQsNGC0LXQu9C4XHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1EZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5faGFuZGxlU3VibWl0Rm9ybURlbGV0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLl9mb3JtRGVsZXRlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuX2hhbmRsZVN1Ym1pdEZvcm1EZWxldGUpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbiAgXHJcbmNvbnN0IHBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZScpO1xyXG4gIFxyXG5leHBvcnQgY29uc3QgZm9ybUVkaXRQcm9maWxlID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcuZm9ybS1lZGl0Jyk7XHJcbmV4cG9ydCBjb25zdCBmb3JtQWRkQ2FyZCA9IHBhZ2UucXVlcnlTZWxlY3RvcignLmZvcm0tYWRkJyk7XHJcbmV4cG9ydCBjb25zdCBpbWFnZUZ1bGwgPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9pbWFnZS1mdWxsJyk7XHJcbmNvbnN0IHdpbmRvd0RlbGV0ZSA9IHBhZ2UucXVlcnlTZWxlY3RvcignLmRlbGV0ZS1wb3B1cCcpO1xyXG5leHBvcnQgY29uc3QgZm9ybVBhdGNoQXZhdGFyID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucGF0Y2gtYXZhdGFyJylcclxuICBcclxuZXhwb3J0IGNvbnN0IGJ1dHRvbkVkaXQgPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19lZGl0LWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYnV0dG9uQWRkID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYnV0dG9uQXZhdGFyID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fZWRpdC1hdmF0YXInKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fbmFtZScpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZURlc2NyaXB0aW9uID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fZGVzY3JpcHRpb24nKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVQaG90byA9IHBhZ2UucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX3Bob3RvJyk7XHJcbiAgXHJcbmV4cG9ydCBjb25zdCBwb3B1cEVkaXQgPSBmb3JtRWRpdFByb2ZpbGUucXVlcnlTZWxlY3RvcignLnBvcHVwJyk7XHJcbmV4cG9ydCBjb25zdCBuYW1lSW5wdXRFZGl0ID0gZm9ybUVkaXRQcm9maWxlLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdHlwZV9uYW1lJyk7XHJcbmV4cG9ydCBjb25zdCBqb2JJbnB1dEVkaXQgPSBmb3JtRWRpdFByb2ZpbGUucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF90eXBlX2Rlc2NyaXB0aW9uJyk7XHJcbmV4cG9ydCBjb25zdCBidXR0b25TdWJtaXRQcm9maWxlID0gZm9ybUVkaXRQcm9maWxlLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fc2F2ZScpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVwRWRpdEF2YXRhciA9IGZvcm1QYXRjaEF2YXRhci5xdWVyeVNlbGVjdG9yKCcucG9wdXAnKTtcclxuZXhwb3J0IGNvbnN0IGF2YXRhcklucHV0RWRpdCA9IGZvcm1QYXRjaEF2YXRhci5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2lucHV0X3R5cGVfdXJsJyk7XHJcbmV4cG9ydCBjb25zdCBidXR0b25TdWJtaXRBdmF0YXIgPSBmb3JtUGF0Y2hBdmF0YXIucXVlcnlTZWxlY3RvcignLnBvcHVwX19zYXZlJyk7XHJcbiAgXHJcbmV4cG9ydCBjb25zdCBwb3B1cEFkZCA9IGZvcm1BZGRDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpO1xyXG5leHBvcnQgY29uc3QgbmFtZUlucHV0QWRkID0gZm9ybUFkZENhcmQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF90eXBlX3RpdGxlJyk7XHJcbmV4cG9ydCBjb25zdCBzcmNJbnB1dEFkZCA9IGZvcm1BZGRDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdHlwZV9saW5rJyk7XHJcblxyXG5leHBvcnQgY29uc3QgcG9wdXBEZWxldGUgPSB3aW5kb3dEZWxldGUucXVlcnlTZWxlY3RvcignLnBvcHVwJyk7XHJcbmV4cG9ydCBjb25zdCBidXR0b25EZWxldGUgPSB3aW5kb3dEZWxldGUucXVlcnlTZWxlY3RvcignLnBvcHVwX19zYXZlJyk7XHJcbiAgXHJcbmV4cG9ydCBjb25zdCBwb3B1cEltYWdlID0gaW1hZ2VGdWxsLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpO1xyXG4gIFxyXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvbkNvbmZpZyA9IHtcclxuICBmaWVsZHNldFNlbGVjdG9yOiAnLnBvcHVwX19mb3JtLXNldCcsXHJcbiAgaW5wdXRTZWxlY3RvcjogJy5wb3B1cF9faW5wdXQnLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiAnLnBvcHVwX19zYXZlJyxcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiAncG9wdXBfX3NhdmVfaW5hY3RpdmUnLFxyXG4gIGlucHV0RXJyb3JDbGFzczogJ3BvcHVwX19pbnB1dF90eXBlX2Vycm9yJyxcclxuICBlcnJvckNsYXNzOiAncG9wdXBfX2lucHV0LWVycm9yX2FjdGl2ZSdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVwSW1hZ2VPYmplY3QgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoaW1hZ2VGdWxsKTtcclxucG9wdXBJbWFnZU9iamVjdC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy/QvtGC0LrRgNGL0YLRjCDQutCw0YDRgtC40L3QutGDXHJcbmV4cG9ydCBmdW5jdGlvbiBvcGVuSW1hZ2UgKHtsaW5rLCBuYW1lfSkge1xyXG4gIHBvcHVwSW1hZ2VPYmplY3Qub3BlbihuYW1lLCBsaW5rKTtcclxufSIsImltcG9ydCBQb3B1cCBmcm9tICcuL1BvcHVwLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXApIHtcclxuICAgICAgICBzdXBlcihwb3B1cCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fcG9wdXBTZWxlY3Rvci5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlJyk7XHJcbiAgICAgICAgdGhpcy5fZmlnY2FwdGlvbiA9IHRoaXMuX3BvcHVwU2VsZWN0b3IucXVlcnlTZWxlY3RvcignLnBvcHVwX19maWdjYXB0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gICAgb3BlbihuYW1lLCBsaW5rKSB7XHJcbiAgICAgICAgdGhpcy5faW1hZ2Uuc3JjID0gbGluaztcclxuICAgICAgICB0aGlzLl9pbWFnZS5hbHQgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuX2ZpZ2NhcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgIH1cclxufSIsImltcG9ydCAnLi9pbmRleC5jc3MnO1xyXG5cclxuaW1wb3J0IENhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9DYXJkLmpzJztcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSAnLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzJztcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSAnLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzJztcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gJy4uL2NvbXBvbmVudHMvVXNlckluZm8uanMnO1xyXG5pbXBvcnQgQXBpIGZyb20gJy4uL2NvbXBvbmVudHMvQXBpLmpzJztcclxuaW1wb3J0IFBvcHVwRGVsZXRlIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBEZWxldGUuanMnO1xyXG5pbXBvcnQgUG9wdXBBdmF0YXIgZnJvbSAnLi4vY29tcG9uZW50cy9Qb3B1cEF2YXRhci5qcyc7XHJcblxyXG5pbXBvcnQgeyB2YWxpZGF0aW9uQ29uZmlnLCBmb3JtQWRkQ2FyZCwgZm9ybUVkaXRQcm9maWxlLCBmb3JtUGF0Y2hBdmF0YXIsIFxyXG4gICAgcG9wdXBBZGQsIHBvcHVwRWRpdCwgcG9wdXBFZGl0QXZhdGFyLCBidXR0b25BdmF0YXIsIGJ1dHRvbkFkZCwgYnV0dG9uRWRpdCwgXHJcbiAgICBuYW1lSW5wdXRBZGQsIG5hbWVJbnB1dEVkaXQsIHNyY0lucHV0QWRkLCBqb2JJbnB1dEVkaXQsIHByb2ZpbGVOYW1lLCBcclxuICAgIHByb2ZpbGVEZXNjcmlwdGlvbiwgYXZhdGFySW5wdXRFZGl0LCBwb3B1cERlbGV0ZSwgb3BlbkltYWdlLFxyXG4gICAgYnV0dG9uU3VibWl0QXZhdGFyLCBidXR0b25TdWJtaXRQcm9maWxlfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XHJcblxyXG4vLyDQktCw0LvQuNC00LDRhtC40Y9cclxuY29uc3QgZm9ybUFkZFZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBmb3JtQWRkQ2FyZC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKSk7XHJcbmNvbnN0IGZvcm1FZGl0VmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25Db25maWcsIGZvcm1FZGl0UHJvZmlsZS5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKSk7XHJcbmNvbnN0IGZvcm1FZGl0QXZhdGFyVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25Db25maWcsIGZvcm1QYXRjaEF2YXRhci5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKSk7XHJcbmZvcm1BZGRWYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuZm9ybUVkaXRWYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuZm9ybUVkaXRBdmF0YXJWYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gICAgYmFzZVVybDogJ2h0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQtNjAnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246ICcxMWMyNjJkOS00MTcyLTQ1OGMtOTI0ZS1kMzAwOWRhNTI2ZDQnLFxyXG4gICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgIH1cclxuICB9KTtcclxuXHJcbmNvbnN0IGluZm9Vc2VyID0gbmV3IFVzZXJJbmZvKHtcclxuICAgIHRpdGxlOiBwcm9maWxlTmFtZSxcclxuICAgIGFib3V0OiBwcm9maWxlRGVzY3JpcHRpb25cclxufSk7XHJcblxyXG5sZXQgdXNlcklkO1xyXG4vL9C/0L7Qu9GD0YfQtdC90LjQtSDQuNC90YTQvtGA0LzQsNGG0LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0Lgg0LrQsNGA0YLQvtGH0LXQuiDRgSDRgdC10YDQstC10YDQsFxyXG5Qcm9taXNlLmFsbChbYXBpLmdldEluZm8oKSwgYXBpLmdldENhcmQoKV0pXHJcbiAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSByZXNbMF07XHJcbiAgICBjb25zdCBjYXJkc0RhdGEgPSByZXNbMV07XHJcbiAgICBcclxuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZDtcclxuXHJcbiAgICBpbmZvVXNlci5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgbmFtZTogdXNlckRhdGEubmFtZSxcclxuICAgICAgICBhYm91dDogdXNlckRhdGEuYWJvdXRcclxuICAgIH0pO1xyXG4gICAgaW5mb1VzZXIuc2V0QXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XHJcblxyXG4gICAgY2FyZFJlbmRlci5yZW5kZXJJdGVtcyhjYXJkc0RhdGEpO1xyXG4gIH0pO1xyXG5cclxuLy/QtNC+0LHQsNCy0LvQtdC90LjQtSDQvdC+0LLQvtC5INC60LDRgNGC0L7Rh9C60LhcclxuY29uc3QgcG9wdXBBZGRDYXJkID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBBZGQsICh7bmFtZSwgbGlua30pID0+IHtcclxuICAgIGFwaS5wb3N0Q2FyZCh7bmFtZSwgbGlua30pXHJcbiAgICAgICAgLnRoZW4gKChyZXMpID0+IHtcclxuICAgICAgICAgICAgcmVuZGVyQ2FyZChyZXMpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgICAgICBwb3B1cEFkZENhcmQuY2xvc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCAoKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIH0pO1xyXG59KTtcclxucG9wdXBBZGRDYXJkLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL9GE0YPQvdC60YbQuNGPINC/0L7RgdGC0LDQstC40YLRjC/Rg9C00LDQu9C40YLRjCDQu9Cw0LnQulxyXG5mdW5jdGlvbiBwdXRMaWtlIChjYXJkLCBjYXJkSWQpIHtcclxuIGlmIChjYXJkLmNoZWNrTGlrZSgpKSB7XHJcbiAgICBjb25zb2xlLmxvZyhjYXJkLmNoZWNrTGlrZSgpKTtcclxuICAgIGFwaS5kZWxldGVMaWtlKGNhcmRJZClcclxuICAgICAgICAudGhlbiAoKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLmdldExpa2VzKHJlcy5saWtlcyk7XHJcbiAgICAgICAgICAgIGNhcmQudG9nZ2xlTGlrZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoICgocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbiB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5sb2coY2FyZC5jaGVja0xpa2UoKSk7XHJcbiAgICBhcGkucHV0TGlrZShjYXJkSWQpXHJcbiAgICAgICAgLnRoZW4gKChyZXMpID0+IHtcclxuICAgICAgICAgICAgY2FyZC5nZXRMaWtlcyhyZXMubGlrZXMpO1xyXG4gICAgICAgICAgICBjYXJkLnRvZ2dsZUxpa2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCAoKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gfVxyXG59XHJcblxyXG4vLyDRhNGD0L3QutGG0LjRjyDRgNC10L3QtNC10YDQsCDQutCw0YDRgtC+0YfQtdC6XHJcbmZ1bmN0aW9uIHJlbmRlckNhcmQgKGVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGNhcmQgPSBuZXcgQ2FyZChlbGVtZW50LCAnI2VsZW1lbnQnLCB1c2VySWQsIHtvcGVuRGVsZXRlV2luZG93fSwgb3BlbkltYWdlLCBoYW5kbGVMaWtlQ2FyZCk7XHJcbiAgICBjYXJkLmNoZWNrSWQodXNlcklkKTtcclxuICAgIGNhcmQuZGVsZXRlV2luZG93KCk7XHJcblxyXG4gICAgZnVuY3Rpb24gaGFuZGxlTGlrZUNhcmQgKGlkKSB7XHJcbiAgICAgICAgcHV0TGlrZShjYXJkLCBpZCk7XHJcbiAgICB9XHJcbiAgICAvLyDRg9C00LDQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60Lgg0YEg0YHQtdGA0LLQtdGA0LBcclxuICAgIGNvbnN0IG9wZW5EZWxldGVQb3B1cCA9IG5ldyBQb3B1cERlbGV0ZShwb3B1cERlbGV0ZSwgKGV2dCkgPT4ge1xyXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGFwaS5kZWxldGVDYXJkKGVsZW1lbnQuX2lkKVxyXG4gICAgICAgICAgICAudGhlbiAoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FyZC5kZWxldGVDYXJkKCk7XHJcbiAgICAgICAgICAgICAgICBvcGVuRGVsZXRlUG9wdXAuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoICgocmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyDRhC3RhtC40Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LAg0Lgg0L3QsNCy0LXRiNC40LLQsNC90LjQtSDRgdC70YPRiNCw0YLQtdC70LXQuVxyXG4gICAgZnVuY3Rpb24gb3BlbkRlbGV0ZVdpbmRvdygpIHtcclxuICAgICAgICBvcGVuRGVsZXRlUG9wdXAub3BlbigpO1xyXG4gICAgICAgIG9wZW5EZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcclxuICAgIGNhcmRSZW5kZXIuYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbn1cclxuXHJcbi8vINGA0LXQvdC00LXRgCDQutCw0YDRgtC+0YfQtdC6XHJcbmNvbnN0IGNhcmRSZW5kZXIgPSBuZXcgU2VjdGlvbiggcmVuZGVyQ2FyZCwgJy5lbGVtZW50cycpO1xyXG5cclxuLy8g0LjQt9C80LXQvdC40YLRjCDQuNC80Y8g0Lgg0L7Qv9C40YHQsNC90LjQtSDQv9GA0L7RhNC40LvRj1xyXG5jb25zdCBwb3B1cEVkaXRQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBFZGl0LCAoe25hbWUsIGxpbmt9KSA9PiB7XHJcbiAgICBidXR0b25TdWJtaXRQcm9maWxlLnRleHRDb250ZW50ID0gJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJztcclxuICAgIGFwaS5wYXRjaEluZm8oe25hbWUsIGxpbmt9KVxyXG4gICAgICAgIC50aGVuICgocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgICAgIGluZm9Vc2VyLnNldFVzZXJJbmZvKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHJlcy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgYWJvdXQ6IHJlcy5hYm91dFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcG9wdXBFZGl0UHJvZmlsZS5jbG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoICgocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbn0pO1xyXG5cclxucG9wdXBFZGl0UHJvZmlsZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcG9wdXBBdmF0YXJFZGl0ID0gbmV3IFBvcHVwQXZhdGFyKHBvcHVwRWRpdEF2YXRhciwgKHVybCkgPT4ge1xyXG4gICAgYnV0dG9uU3VibWl0QXZhdGFyLnRleHRDb250ZW50ID0gJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJ1xyXG4gICAgYXBpLnBhdGNoQXZhdGFyKHVybClcclxuICAgICAgICAudGhlbiAoKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBpbmZvVXNlci5zZXRBdmF0YXIocmVzLmF2YXRhcik7XHJcbiAgICAgICAgICAgIHBvcHVwQXZhdGFyRWRpdC5jbG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoICgocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgICAgfSk7XHJcbn0pO1xyXG5cclxuLy/RgdC70YPRiNCw0YLQtdC70Ywg0LrQvdC+0L/QutC4INC00L7QsdCw0LLQuNGC0YxcclxuYnV0dG9uQWRkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgcG9wdXBBZGRDYXJkLm9wZW4oKTtcclxuICAgIGZvcm1BZGRWYWxpZGF0aW9uLmNsZWFuRXJyb3JNZXNzYWdlKG5hbWVJbnB1dEFkZCk7XHJcbiAgICBmb3JtQWRkVmFsaWRhdGlvbi5jbGVhbkVycm9yTWVzc2FnZShzcmNJbnB1dEFkZCk7XHJcbiAgICBuYW1lSW5wdXRBZGQudmFsdWUgPSAnJztcclxuICAgIHNyY0lucHV0QWRkLnZhbHVlID0gJyc7XHJcbiAgICBmb3JtQWRkVmFsaWRhdGlvbi5ibG9ja0J1dHRvblNhdmUoKTtcclxufSk7XHJcblxyXG4vL9GB0LvRg9GI0LDRgtC10LvRjCDQutC90L7Qv9C60Lgg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRj1xyXG5idXR0b25FZGl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY29uc3QgaW5mb0Zyb21QYWdlID0gaW5mb1VzZXIuZ2V0VXNlckluZm8oKTtcclxuICAgIG5hbWVJbnB1dEVkaXQudmFsdWUgPSBpbmZvRnJvbVBhZ2UubmFtZTtcclxuICAgIGpvYklucHV0RWRpdC52YWx1ZSA9IGluZm9Gcm9tUGFnZS5hYm91dDtcclxuICAgIGZvcm1FZGl0VmFsaWRhdGlvbi5jbGVhbkVycm9yTWVzc2FnZShuYW1lSW5wdXRFZGl0KTtcclxuICAgIGZvcm1FZGl0VmFsaWRhdGlvbi5jbGVhbkVycm9yTWVzc2FnZShqb2JJbnB1dEVkaXQpO1xyXG4gICAgYnV0dG9uU3VibWl0UHJvZmlsZS50ZXh0Q29udGVudCA9ICfQodC+0YXRgNCw0L3QuNGC0YwnO1xyXG4gICAgZm9ybUVkaXRWYWxpZGF0aW9uLmJsb2NrQnV0dG9uU2F2ZSgpO1xyXG4gICAgcG9wdXBFZGl0UHJvZmlsZS5vcGVuKCk7XHJcbn0pO1xyXG5cclxuLy8g0YHQu9GD0YjQsNGC0LXQu9GMINC60L3QvtC/0LrQuCDQuNC30LzQtdC90LjRgtGMINCw0LLQsNGC0LDRgNC60YNcclxuYnV0dG9uQXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgYnV0dG9uU3VibWl0QXZhdGFyLnRleHRDb250ZW50ID0gJ9Ch0L7RhdGA0LDQvdC40YLRjCc7XHJcbiAgICBwb3B1cEF2YXRhckVkaXQub3BlbigpO1xyXG4gICAgZm9ybUVkaXRBdmF0YXJWYWxpZGF0aW9uLmNsZWFuRXJyb3JNZXNzYWdlKGF2YXRhcklucHV0RWRpdCk7XHJcbiAgICBhdmF0YXJJbnB1dEVkaXQudmFsdWUgPSAnJztcclxuICAgIHBvcHVwQXZhdGFyRWRpdC5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgZm9ybUVkaXRBdmF0YXJWYWxpZGF0aW9uLmJsb2NrQnV0dG9uU2F2ZSgpO1xyXG59KTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5fdXJsID0gY29uZmlnLmJhc2VVcmw7XHJcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIF9oYW5kbGVSZXNwb25zZShyZXMpIHtcclxuICAgICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ9Cf0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LAnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5mbygpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuICh0aGlzLl9oYW5kbGVSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2FyZCgpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkc2AsIHtcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuICh0aGlzLl9oYW5kbGVSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGF0Y2hJbmZvKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBhYm91dDogZGF0YS5saW5rXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4gKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0Q2FyZChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBsaW5rOiBkYXRhLmxpbmtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbiAodGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUNhcmQoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzLyR7ZGF0YX1gLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtkYXRhfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbiAodGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dExpa2UoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzLyR7ZGF0YX0vbGlrZXNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtkYXRhfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbiAodGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUxpa2UoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzLyR7ZGF0YX0vbGlrZXNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtkYXRhfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbiAodGhpcy5faGFuZGxlUmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHBhdGNoQXZhdGFyKGxpbmspIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgYXZhdGFyOiBsaW5rXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4gKHRoaXMuX2hhbmRsZVJlc3BvbnNlKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl90aXRsZSA9IGRhdGEudGl0bGU7XHJcbiAgICAgICAgdGhpcy5fYWJvdXQgPSBkYXRhLmFib3V0O1xyXG5cclxuICAgICAgICB0aGlzLl9wcm9maWxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19uYW1lJyk7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZURlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2Rlc2NyaXB0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZVBob3RvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX3Bob3RvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/RgdC+0LHQuNGA0LDQtdGCINC00LDQvdC90YvQtSDRgdC+INGB0YLRgNCw0L3QuNGG0YtcclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIGNvbnN0IGZvcm1UaXRsZSA9IHRoaXMuX3RpdGxlLnRleHRDb250ZW50O1xyXG4gICAgICAgIGNvbnN0IGZvcm1EZXNjcmlwdGlvbiA9IHRoaXMuX2Fib3V0LnRleHRDb250ZW50O1xyXG4gICAgICAgIHJldHVybiB7bmFtZTogZm9ybVRpdGxlLCBhYm91dDogZm9ybURlc2NyaXB0aW9ufTtcclxuICAgIH1cclxuXHJcbiAgICAvL9GD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCINC90L7QstC+0LUg0LjQvNGPINC4INC+0L/QuNGB0LDQvdC40LVcclxuICAgIHNldFVzZXJJbmZvKHtuYW1lLCBhYm91dH0pIHtcclxuICAgICAgICB0aGlzLl9wcm9maWxlTmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5fcHJvZmlsZURlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gYWJvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QXZhdGFyKGF2YXRhcikge1xyXG4gICAgICAgIHRoaXMuX3Byb2ZpbGVQaG90by5zcmMgPSBhdmF0YXI7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyICwgc2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbSAoZWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdG9yLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySXRlbXMoaXRlbXMpIHtcclxuICAgICAgICBpdGVtcy5yZXZlcnNlKCkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwQXZhdGFyIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IgKHBvcHVwLCBoYW5kbGVTdWJtaXRGb3JtKSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXApO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdEZvcm0gPSBoYW5kbGVTdWJtaXRGb3JtO1xyXG5cclxuICAgICAgICB0aGlzLl9mb3JtID0gcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5faW5wdXREYXRhID0gcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dCcpO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXREYXRhLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5fdXJsID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5fdXJsKTtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlU3VibWl0Rm9ybSAodGhpcy5fdXJsKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5yZXNldCgpO1xyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwidXNlcklkIiwib3BlbkRlbGV0ZVdpbmRvdyIsIm9wZW5JbWFnZSIsImhhbmRsZUxpa2VDYXJkIiwidGhpcyIsIl9kYXRhIiwiX2FycmF5TGlrZXMiLCJsaWtlcyIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX29wZW5JbWFnZSIsIl9lbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiX29wZW5EZWxldGVXaW5kb3ciLCJfdXNlcklkIiwiX2hhbmRsZUxpa2VDYXJkIiwiX2VsZW1lbnRQaG90byIsInF1ZXJ5U2VsZWN0b3IiLCJfY291bnRMaWtlcyIsIl9idXR0b25UcmFzaCIsIl9pY29uQnV0dG9uTGlrZSIsImRvY3VtZW50IiwiY29udGVudCIsImNsb25lTm9kZSIsIl9zZXRFdmVudExpc3RlbmVycyIsImJ1dHRvbkxpa2UiLCJjb25zb2xlIiwibG9nIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9pZCIsImxpbmsiLCJuYW1lIiwiZ2V0TGlrZXMiLCJhcnIiLCJ0ZXh0Q29udGVudCIsImxlbmd0aCIsInRvZ2dsZUxpa2UiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJjaGVja0xpa2UiLCJzb21lIiwiaXRlbSIsImRlbGV0ZVdpbmRvdyIsImRlbGV0ZUNhcmQiLCJyZW1vdmUiLCJjaGVja0lkIiwib3duZXIiLCJhZGQiLCJnZW5lcmF0ZUNhcmQiLCJzcmMiLCJhbHQiLCJQb3B1cCIsInBvcHVwIiwiX3BvcHVwU2VsZWN0b3IiLCJfaGFuZGxlRXNjQ2xvc2UiLCJiaW5kIiwiX2hhbmRsZU92ZXJsYXlDbG9zZSIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2dCIsImtleSIsInRhcmdldCIsImNvbnRhaW5zIiwib3BlbiIsInNldEV2ZW50TGlzdGVuZXJzIiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdEZvcm0iLCJzdXBlciIsIl9oYW5kbGVTdWJtaXRGb3JtIiwiX2Zvcm0iLCJfaW5wdXRMaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsIl9nZXRJbnB1dFZhbHVlcyIsIl9pbnB1dFZhbHVlTGlzdCIsImZvckVhY2giLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwiX2xpc3QiLCJ0aXRsZSIsImFib3V0IiwicmVzZXQiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfZm9ybUVsZW1lbnQiLCJfY29uZmlnIiwiQXJyYXkiLCJmcm9tIiwiaW5wdXRTZWxlY3RvciIsIl9idXR0b25FbGVtZW50Iiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJlcnJvck1lc3NhZ2UiLCJlcnJvckVsZW1lbnQiLCJpZCIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJkaXNhYmxlZCIsImNsZWFuRXJyb3JNZXNzYWdlIiwiYmxvY2tCdXR0b25TYXZlIiwiZW5hYmxlVmFsaWRhdGlvbiIsIlBvcHVwRGVsZXRlIiwiaGFuZGxlU3VibWl0Rm9ybURlbGV0ZSIsIl9oYW5kbGVTdWJtaXRGb3JtRGVsZXRlIiwiX2Zvcm1EZWxldGUiLCJfZGVsZXRlQ2FyZCIsInBhZ2UiLCJmb3JtRWRpdFByb2ZpbGUiLCJmb3JtQWRkQ2FyZCIsImltYWdlRnVsbCIsIndpbmRvd0RlbGV0ZSIsImZvcm1QYXRjaEF2YXRhciIsImJ1dHRvbkVkaXQiLCJidXR0b25BZGQiLCJidXR0b25BdmF0YXIiLCJwcm9maWxlTmFtZSIsInByb2ZpbGVEZXNjcmlwdGlvbiIsInBvcHVwRWRpdCIsIm5hbWVJbnB1dEVkaXQiLCJqb2JJbnB1dEVkaXQiLCJidXR0b25TdWJtaXRQcm9maWxlIiwicG9wdXBFZGl0QXZhdGFyIiwiYXZhdGFySW5wdXRFZGl0IiwiYnV0dG9uU3VibWl0QXZhdGFyIiwicG9wdXBBZGQiLCJuYW1lSW5wdXRBZGQiLCJzcmNJbnB1dEFkZCIsInBvcHVwRGVsZXRlIiwidmFsaWRhdGlvbkNvbmZpZyIsImZpZWxkc2V0U2VsZWN0b3IiLCJwb3B1cEltYWdlT2JqZWN0IiwiX2ltYWdlIiwiX2ZpZ2NhcHRpb24iLCJmb3JtQWRkVmFsaWRhdGlvbiIsImZvcm1FZGl0VmFsaWRhdGlvbiIsImZvcm1FZGl0QXZhdGFyVmFsaWRhdGlvbiIsImFwaSIsIl91cmwiLCJiYXNlVXJsIiwiX2hlYWRlcnMiLCJoZWFkZXJzIiwiX2hhbmRsZVJlc3BvbnNlIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwiZ2V0SW5mbyIsImZldGNoIiwidGhlbiIsImdldENhcmQiLCJwYXRjaEluZm8iLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInBvc3RDYXJkIiwicHV0TGlrZSIsImRlbGV0ZUxpa2UiLCJwYXRjaEF2YXRhciIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJpbmZvVXNlciIsIl90aXRsZSIsIl9hYm91dCIsIl9wcm9maWxlTmFtZSIsIl9wcm9maWxlRGVzY3JpcHRpb24iLCJfcHJvZmlsZVBob3RvIiwiZ2V0VXNlckluZm8iLCJzZXRVc2VySW5mbyIsInNldEF2YXRhciIsImFsbCIsInVzZXJEYXRhIiwiY2FyZHNEYXRhIiwiY2FyZFJlbmRlciIsInJlbmRlckl0ZW1zIiwicG9wdXBBZGRDYXJkIiwicmVuZGVyQ2FyZCIsImNhdGNoIiwiZWxlbWVudCIsImNhcmQiLCJvcGVuRGVsZXRlUG9wdXAiLCJjYXJkSWQiLCJjYXJkRWxlbWVudCIsImFkZEl0ZW0iLCJyZW5kZXJlciIsInNlbGVjdG9yIiwiX3JlbmRlcmVyIiwiX3NlbGVjdG9yIiwicHJlcGVuZCIsIml0ZW1zIiwicmV2ZXJzZSIsInBvcHVwRWRpdFByb2ZpbGUiLCJwb3B1cEF2YXRhckVkaXQiLCJfaW5wdXREYXRhIiwidXJsIiwiaW5mb0Zyb21QYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==